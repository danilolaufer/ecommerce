paths:
  /api/users/:
    get:
      summary: Obtiene todos los usuarios disponibles en la app
      tags:
        - Users
      responses:
        "200":
          description: los usuarios fueron obetenidos satisfactoriamente de la base de datos
        "400":
          description: wawn vuia un daot no esperado  
        "500":
          description: error itnerno edl servidor , usualmente generado  por una query defectuosa 

  /api/users/{uid}:
    get:
      summary: Obtiene un usuarios disponible en la App por ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario que se desea buscar
          schema:
            $type: String
      responses:
        "200":
          description: La operacion fue exitosa!!
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#components/schemas/User'

        "400":
          description: Se envio un dato no esperado.
        "500":
          description: Error inesperado en el server, no se pudo manejar el proceso.
    # put


components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado por MongoDB
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Email del usuario
        password:
          type: String
          description: Contrase√±a del usuario
      example:
        _id: ObjectId("647fa8c9e46dbc5a20320181")
        first_name: USUAIRODEPEURIBA1
        last_name: apelldiodeprueba1
        email: danilofotos20204@gmail.com
        password: resbalones123
